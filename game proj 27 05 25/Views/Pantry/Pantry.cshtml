@model IEnumerable<game_proj_27_05_25.Models.Item>
@using game_proj_27_05_25.Models;

<style>
    @@font-face {
        font-family: Hero;
        font-weight: 700;
        src: url("fonts/ofont.ru_Hero.ttf");
    }

    body {
        background-image: url('img/Pantry/Pantry.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
        margin: 0;
        padding: 0;
    }

    html, body {
        overflow: hidden;
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .dialog {
        display: none;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(73, 73, 103, 0.8);
        padding: 30px;
        border: none;
        border-radius: 20px;
        z-index: 1000;
        font-family: Hero;
    }

    .click-btn {
        border: none;
        border-radius: 10px;
        padding: 10px;
        background-color: rgba(186, 186, 186, 0.59);
        transition: filter .4s;
        font-family: Hero;
    }

        .click-btn:hover {
            filter: brightness(120%);
        }

        .click-btn:active {
            filter: brightness(70%);
        }

    .buttons {
        display: flex;
        justify-content: space-evenly;
        gap: 20px;
    }

    .dialog-message {
        background-color: rgba(186, 186, 186, 0.74);
        padding: 5px;
        border-radius: 5px;
        text-align: center;
    }

    .changeLocation-btn {
        position: absolute;
        top: 90%;
        left: 45%;
        background-color: transparent;
        border: none;
        transition: filter .4s;
    }

        .changeLocation-btn:hover {
            filter: brightness(120%);
        }

        .changeLocation-btn:active {
            filter: brightness(70%);
        }

    .downArrow {
        height: 50px;
    }

    #photoframeWithPhoto{
        height: 30px;
    }

    #photoframe{
        height: 30px;
    }

    .photoframe-btn {
        position: absolute;
        background-color: transparent;
        border: none;
        transform: translate(632px, 332px);
        transition: filter .4s;
    }

        .photoframe-btn:hover {
            filter: brightness(120%);
        }

        .photoframe-btn:active {
            filter: brightness(70%);
        }

    #labCard {
        height: 20px;
    }

    .labCard-btn {
        position: absolute;
        background-color: transparent;
        border: none;
        transform: translate(635px, 440px);
        transition: filter .4s;
    }

        .labCard-btn:hover {
            filter: brightness(120%);
        }

        .labCard-btn:active {
            filter: brightness(70%);
        }

    #flashlight{
        display: none;
        height: 25px;
        filter: brightness(120%);
    }
    
    .flashlight-btn {
        position: absolute;
        background-color: transparent;
        border: none;
        transform: translate(895px, 235px);
        transition: filter .4s;
    }

        .flashlight-btn:hover {
            filter: brightness(160%);
        }

        .flashlight-btn:active {
            filter: brightness(70%);
        }

    #pillow {
        filter: brightness(120%);
        transform: translate(805px, 185px);
        height: 65px;
        transition: filter .4s;
    }

        #pillow:hover {
            filter: brightness(140%);
        }

        #pillow:active {
            filter: brightness(100%);
        }
</style>

<body>
    @if (!ViewBag.PhotoUsed)
    {
        <!--для рамки-->
        <button class="photoframe-btn" onclick="lookPhotoframe()">
            <img src="img/Pantry/photoFrame.png" id="photoframe">
        </button>
    }
    else
    {
        <!--для рамки с фото-->
        <button class="photoframe-btn" onclick="lookPhotoframeWithPhoto()">
            <img src="img/Pantry/photoFrameWithPhoto.png" id="photoframeWithPhoto">
        </button>
    }
    @if (!ViewBag.LaboratoryCardFound && ViewBag.PhotoUsed)
    {
        <!--для карты лаборатории-->
        <button class="labCard-btn" onclick="lookLabCard()" id="labCard-btn">
            <img src="img/Pantry/labCard.png" id="labCard">
        </button>
    }
    @if (!ViewBag.FlashlightFound)
    {
        <!--для фонарика-->
        <button class="flashlight-btn" onclick="lookFlashlight()">
            <img src="img/Pantry/flashlight.png" id="flashlight">
        </button>
        <img src="img/Pantry/pillow.png" id="pillow" onclick="showFlashlight()">
    }
    <!--диалоговые окна-->
    <div class="dialog" id="dialog">
        <p class="dialog-message" id="dialog-msg"></p>
        <div class="buttons" id="buttonsUse">
            <button onclick="useItem()" class="click-btn">Использовать</button>
            <button onclick="hideDialog()" class="click-btn">Оставить</button>
        </div>
        <div class="buttons" id="buttonsTake">
            <button onclick="takeItem()" class="click-btn">Взять</button>
            <button onclick="hideDialog()" class="click-btn">Оставить</button>
        </div>
    </div>
    <!--смена локации-->
    <button name="changeLocation-btn" class="changeLocation-btn" onclick="goBack()">
        <img src="img/ForAll/downArrow.png" class="downArrow">
    </button>
</body>

<script>
    let id = 0;
    //если у игрока есть фотография, то он сможет ее поставить в рамку, 
    // а после получить ключ от лаборатории, который вывалится из рамки после помещения фото
    function lookPhotoframeWithPhoto() {
        document.getElementById("dialog").style.display = "block";
            document.getElementById("buttonsTake").style.display = "none";
            document.getElementById("buttonsUse").style.display = "none";
            document.getElementById("dialog-msg").textContent = "Интересно, что с ними сейчас? Они тоже пилотировали Пенроуз-512? Ещё девушка справа мне кого-то напоминает..";
            setTimeout(hideDialog, 5000);
    }
    function lookPhotoframe(){
        //если нет фото - отобразится диалоговое окно с описанием и подсказкой взять фото
        //если есть - отобразятся и кнопки выбора
        id = 1;
        if (@Json.Serialize(ViewBag.PhotoFound)) {
            document.getElementById("dialog").style.display = "block";
            document.getElementById("buttonsTake").style.display = "none";
            document.getElementById("buttonsUse").style.display = "flex";
            document.getElementById("dialog-msg").textContent = "Внутри рамки написаны имена 'Лилит Итоу' и 'Алина Сео'. Возможно, на той фотографии были они. Поставить фотографию в рамку?";
        }
        else{
            document.getElementById("dialog").style.display = "block";
            document.getElementById("buttonsTake").style.display = "none";
            document.getElementById("buttonsUse").style.display = "none";
            document.getElementById("dialog-msg").textContent = "Внутри рамки написаны имена 'Лилит Итоу' и 'Алина Сео'. Вроде в кабине пилота висела какая-то фотография";
            setTimeout(hideDialog, 5000);
        }
    }
    //при нажатии на лаб карту
    function lookLabCard() {
        id = 1;
        getDescription(id);
    }
    //показать фонарик
    function showFlashlight() {
        document.getElementById("dialog").style.display = "block";
        document.getElementById("buttonsTake").style.display = "none";
        document.getElementById("buttonsUse").style.display = "none";
        document.getElementById("dialog-msg").textContent = "За подушкой лежал какой-то модуль для реплик, похожий на фонарик";
        setTimeout(hideDialog, 3000);
        document.getElementById('flashlight').style.display = "block";
        document.getElementById('pillow').style.display = "none";
    }
    //при нажатии на фонарик
    function lookFlashlight() {
        id = 2;
        getDescription(id);
    }
    //для получения описание предмета
    async function getDescription(itemId) {
        try {
            const response = await fetch(`/Pantry/GetDescription/${id}`);
            if (!response.ok) throw new Error('Ошибка: ' + response.status);

            const description = await response.text();

            document.getElementById('dialog').style.display = 'block';
            document.getElementById("buttonsTake").style.display = "flex";
            document.getElementById("buttonsUse").style.display = "none";
            document.getElementById('dialog-msg').textContent = description;
        }
        catch (error) {
            alert('Не удалось получить описание: ' + error.message);
        }
    }
    //воспользоваться фотографией и получить карту
    async function useItem() {
        try {
            const response = await fetch(`/Pantry/UseItem`, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) throw new Error(await response.text());

            const result = await response.json();

            if (result.success) {
                await reloadPantryView();
                document.getElementById("labCard").style.display = "block";
                document.getElementById('dialog').style.display = 'block';
                document.getElementById("buttonsTake").style.display = "none";
                document.getElementById("buttonsUse").style.display = "none";
                document.getElementById("dialog-msg").textContent = "Из рамки что-то выпало на пол";
                setTimeout(hideDialog, 2000);
            } else {
                alert("Ошибка");
            }
        }
        catch (error) {
            alert('Не удалось использовать предмет: ' + error.message);
        }
        
    }
    //взять предмет
    async function takeItem() {
        if (!id) return;

        try {
            const response = await fetch(`/Pantry/TakeItem/${id}`, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) throw new Error(await response.text());

            const result = await response.json();

            if (result.success) {
                switch (id) {
                    case 1:
                        document.getElementById('labCard').style.display = "none";
                        break;
                    case 2:
                        document.getElementById('flashlight').style.display = "none";
                        break;
                }
                document.getElementById('buttonsTake').style.display = 'none';
                document.getElementById('dialog-msg').textContent = result.message;
                setTimeout(hideDialog, 2000);
            } else {
                alert(result.message);
            }
        }
        catch (error) {
            alert('Не удалось взять предмет: ' + error.message);
        }
    }
    //спрятать диалоговое окно
    function hideDialog(){
        document.getElementById('dialog').style.display = 'none';
        id = 0;
    }
    //вернуться в коридор-холл
    function goBack() {
        try {
            window.location.href = '/Pantry/GoBack';
        }
        catch (error) {
            alert('Не удалось перейти на другую локацию: ' + error.message);
        }
    }
    async function reloadPantryView() {
        try {
            const response = await fetch('/Pantry');
            const html = await response.text();
            document.body.innerHTML = html;
        } catch (error) {
            alert('Ошибка при обновлении страницы:', error);
        }
    }
</script>