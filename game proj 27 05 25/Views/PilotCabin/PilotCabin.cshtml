@model IEnumerable<game_proj_27_05_25.Models.Item>
@using game_proj_27_05_25.Models;

<style>
    @@font-face {
        font-family: Hero;
        font-weight: 700;
        src: url("fonts/ofont.ru_Hero.ttf");
    }

    body {
        background-image: url('img/PilotCabin/pilotCabin.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
        margin: 0;
        padding: 0;
    }

    html, body {
        overflow: hidden;
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .dialog {
        display: none;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(73, 73, 103, 0.8);
        padding: 30px;
        border: none;
        border-radius: 20px;
        z-index: 1000;
        font-family: Hero;
    }

    .click-btn {
        border: none;
        border-radius: 10px;
        padding: 10px;
        background-color: rgba(186, 186, 186, 0.59);
        transition: filter .4s;
        font-family: Hero;
    }

        .click-btn:hover {
            filter: brightness(120%);
        }

        .click-btn:active {
            filter: brightness(70%);
        }

    .buttons {
        display: flex;
        justify-content: space-evenly;
        gap: 20px;
    }

    .dialog-message {
        background-color: rgba(186, 186, 186, 0.74);
        padding: 5px;
        border-radius: 5px;
        text-align: center;
    }

    .changeLocation-btn {
        position: absolute;
        top: 90%;
        left: 45%;
        background-color: transparent;
        border: none;
        transition: filter .4s;
    }

        .changeLocation-btn:hover {
            filter: brightness(120%);
        }

        .changeLocation-btn:active {
            filter: brightness(70%);
        }

    .downArrow {
        height: 50px;
    }


    #photo {
        height: 10%;
        transform: translate(330px, 110px);
        border-radius: 5px;
        filter: brightness(70%);
        transition: filter .4s;
    }

        #photo:hover {
            filter: brightness(100%);
        }

        #photo:active {
            filter: brightness(55%);
        }
</style>

<body>
    <!--если фото не найдено - отображать его-->
    @if (!ViewBag.PhotoFound)
    {
        <img src="/img/PilotCabin/photo.png" id="photo" onclick="showDialog(1)">
    }
    <div class="dialog" id="dialog">
        <p class="dialog-message" id="dialog-msg"></p>
        <div class="buttons" id="buttons">
            <button onclick="takeItem()" class="click-btn">Взять</button>
            <button onclick="hideDialog()" class="click-btn">Оставить</button>
        </div>
    </div>
    <button name="changeLocation-btn" class="changeLocation-btn" onclick="goBack()">
        <img src="img/ForAll/downArrow.png" class="downArrow">
    </button>
</body>

<script>
    let id = 0;
    let k = 0
    //переход в коридор-холл
    async function whatHappened() {
        if (@ViewBag.Start == 0) {
            if (k == 0) {
                document.getElementById('dialog-msg').textContent = "Похоже, корабль разбился.. и к сожалению, я не помню, как тут оказалась";
                document.getElementById('dialog').style.display = 'block';
                document.getElementById('buttons').style.display = 'none';
                setTimeout(hideDialog, 3000);
            }
            if (k == 1) {
                document.getElementById('dialog-msg').textContent = "Нужно осмотреть все и выбраться.. что-то мне подсказывает, что я должна кого-то найти";
                document.getElementById('dialog').style.display = 'block';
                document.getElementById('buttons').style.display = 'none';
                setTimeout(hideDialog, 5000);
            }
            if ( k == 2 ) {

                try {
                    const response = await fetch(`/PilotCabin/Start`);
                    if (!response.ok) throw new Error('Ошибка: ' + response.status);
                }
                catch (error) {
                    alert('Не удалось получить описание старта: ' + error.message);
                }
            }
        }
    }
    function goBack() {
        try {
            window.location.href = '/PilotCabin/GoBack';
        }
        catch (error) {
            alert('Не удалось перейти на другую локацию: ' + error.message);
        }
    }
    //показывать окно при нажатии на предмет
    async function showDialog(itemId) {
        id = itemId;
        try {
            const response = await fetch(`/PilotCabin/GetDescription/${id}`);
            if (!response.ok) throw new Error('Ошибка: ' + response.status);

            const description = await response.text();
            document.getElementById('dialog-msg').textContent = description;
            document.getElementById('dialog').style.display = 'block';
        } 
        catch (error) {
            alert('Не удалось получить описание: ' + error.message);
        }
    }
    //прятать окно после нахождения предмета
    function hideDialog() {
        document.getElementById('dialog').style.display = 'none';
        id = 0;
        if (@ViewBag.Start == 0 && k == 0) {
            k = 1;
            whatHappened();
        }
        if (@ViewBag.Start == 0 && k == 1) {
            k = 2;
            whatHappened();
        }
    }
    //брать предмет
    async function takeItem() {
        if (!id) return;

        try {
            const response = await fetch(`/PilotCabin/TakeItem/${id}`, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) throw new Error(await response.text());

            const result = await response.json();

            if (result.success) {
                document.getElementById('photo').style.display = 'none';
                document.getElementById('buttons').style.display = 'none';
                document.getElementById('dialog-msg').textContent = result.message;
                setTimeout(hideDialog, 2000);
            } else {
                alert(result.message);
            }
        } 
        catch (error) {
            alert('Не удалось взять предмет: ' + error.message);
        }
    }

    whatHappened();
</script>
